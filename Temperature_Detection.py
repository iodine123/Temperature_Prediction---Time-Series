# -*- coding: utf-8 -*-
"""Submission 2 - Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z1mHBxDwenIQX6c-cht5qjvMAImheYpT
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Dicoding_Machine_Learning_2/Submission2

import pandas as pd
import numpy as np

df = pd.read_csv('weatherHistory.csv')
df.head()

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

dates = df['Formatted Date']
temp = df['Temperature (C)']

temp_train, temp_test, date_train, date_test = train_test_split(temp, dates, test_size=0.2, shuffle=False)

dates_show = dates[:1000]
temp_show = temp[:1000]

plt.figure(figsize=(15,5))
plt.plot(dates_show, temp_show)
plt.title(
    'Temperature',
    fontsize=20
    )

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

import tensorflow as tf

train_set = windowed_dataset(temp_train, window_size=60, batch_size=1024, shuffle_buffer=1000)
test_set = windowed_dataset(temp_test, window_size=60, batch_size=1024, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64),
  tf.keras.layers.Dense(32, activation="relu"),
  tf.keras.layers.Dense(32, activation="relu"),
  tf.keras.layers.Dense(1),
])
optimizer = tf.keras.optimizers.Adam(learning_rate=0.0001)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

class myCallbacks(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<1): #(RangMax-RangeMin)*0.1 = (51-21)*0.1 = 3
      print('\nMAE Tercapai')
      self.model.stop_training = True
callback = myCallbacks()

history = model.fit(train_set, validation_data = test_set, epochs=20, callbacks=[callback])

import matplotlib.pyplot as plt
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

import matplotlib.pyplot as plt
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()